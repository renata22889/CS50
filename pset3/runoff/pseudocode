

// Record preference if vote is valid
bool vote(int voter, int rank, string name)
{
    // TODO
    return false;
}

// Tabulate votes for non-eliminated candidates
void tabulate(void)
{
    // TODO
    return;
}

// Print the winner of the election, if there is one
bool print_winner(void)
{
    // TODO
    return false;
}

// Return the minimum number of votes any remaining candidate has
int find_min(void)
{
    // TODO
    
    
    
    return 0;
}

// Return true if the election is tied between all candidates, false otherwise
bool is_tie(int min)
{
    // TODO
    return false;
}

// Eliminate the candidate (or candidates) in last place
void eliminate(int min)
{
    // TODO
    return;
}




for (int i = 0 ; i < voter_count; i++)
    {
        //for (int j = 0 ; j < candidate_count; j++)
        //{

            int k = preferences[i][j];

            if (candidates[k].eliminated == false)
            {
                
                candidates[k].votes = candidates[k].votes + 1;
                //printf("candidate %s has in runde %i, %i votes\n", candidates[k].name, j+1, candidates[k].votes);
            }
            printf("candidate %s has in runde %i, %i votes\n", candidates[k].name, j+1, candidates[k].votes);
            //if (candidates[k].eliminated == true)
            //{
                //j++;
            //}
        }
    }